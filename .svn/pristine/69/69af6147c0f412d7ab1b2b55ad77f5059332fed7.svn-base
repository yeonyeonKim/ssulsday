package kr.ssulsday.cms.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.cubex.comm.vo.PagingListVO;
import kr.cubex.comm.vo.SearchPageVO;
import kr.cubex.data.BaseResult;
import kr.cubex.data.JspResult;
import kr.cubex.data.ResultData;
import kr.cubex.utils.ComCrypto;
import kr.cubex.utils.DbUtils;
import kr.ssulsday.cms.service.CommentInfoService;
import kr.ssulsday.cms.vo.CommentInfoVO;

@Controller
@RequestMapping(value = "/cms/comment")
public class CommentInfoController {

	private static final Logger logger = LoggerFactory.getLogger(CommentInfoController.class);

	@Resource
	private CommentInfoService CommentInfoService;
	@Autowired
	private MessageSource messageSource;

	@RequestMapping("/list.do")
	public String commentListForm(@ModelAttribute("searchVO") SearchPageVO searchVO, ModelMap model,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());

		PagingListVO listVO = CommentInfoService.selectListPage(searchVO);

		model.addAttribute(PagingListVO.ATTR_RESULT_LIST, listVO.getItems());
		model.addAttribute(SearchPageVO.ATTR_SEARCH_PAGE, listVO.getSearchPage());
		model.addAttribute(SearchPageVO.ATTR_PAGING_INFO, listVO.getPagingInfo());

		return "cms/comment/list";

	}

	@RequestMapping("/reg.do")
	public String commentRegForm(@ModelAttribute("searchVO") SearchPageVO searchVO, ModelMap model,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());
		/*
		 * BaseSessInfo info = SessionUtility.getLoginForAdmin(request);
		 * 
		 * if (info == null) { return AdminSessInfo.REDIRECT_URI_CMS_LOGIN; }
		 */

		model.addAttribute(SearchPageVO.ATTR_SEARCH_PAGE, searchVO);

		return "cms/comment/reg";
	}

	@RequestMapping("/edit.do")
	public String commentEditForm(@ModelAttribute("searchVO") SearchPageVO searchVO,
			@ModelAttribute("CommentInfoVO") CommentInfoVO commentVO, ModelMap model, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());
		/*
		 * BaseSessInfo info = SessionUtility.getLoginForAdmin(request);
		 * 
		 * if (info == null) { return AdminSessInfo.REDIRECT_URI_CMS_LOGIN; }
		 */
		commentVO = CommentInfoService.selectData(commentVO);

		model.addAttribute(JspResult.ATTR_RESULT, commentVO);
		model.addAttribute(SearchPageVO.ATTR_SEARCH_PAGE, searchVO);

		return "cms/comment/edit";
	}

	@RequestMapping("/view.do")
	public String commentViewForm(@ModelAttribute("searchVO") SearchPageVO searchVO, @ModelAttribute CommentInfoVO commentVO,
			ModelMap model, HttpServletRequest request) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());
		/*
		 * BaseSessInfo info = SessionUtility.getLoginForAdmin(request);
		 * 
		 * if (info == null) { return AdminSessInfo.REDIRECT_URI_CMS_LOGIN; }
		 */
		commentVO = CommentInfoService.selectData(commentVO);

		model.addAttribute(JspResult.ATTR_RESULT, commentVO);
		model.addAttribute(JspResult.ATTR_SEARCH_PAGE, searchVO);

		return "cms/comment/view";
	}

	@RequestMapping("/reg_action.do")
	@ResponseBody
	public BaseResult commentCreateAction(@RequestBody CommentInfoVO commentvo, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());
		ResultData resVO = new ResultData();

		try {
			CommentInfoService.insertData(commentvo);
			resVO.setRetCode(ResultData.RET_OK, messageSource);
		} catch (DataAccessException e) {
			if (DbUtils.getErrorCode(e) == DbUtils.ERR_DB_DUPLICATE_KEY) {
				resVO.setRetCode(ResultData.ERR_DB_DUPLICATE_KEY, messageSource);
			} else {
				resVO.setRetCode(ResultData.ERR_RESULT_FAIL, messageSource);
			}
			logger.error(request.getServletPath() + ", Insert Error => " + e.getMessage());
		}

		return resVO;
	}

	@RequestMapping("/edit_action.do")
	public BaseResult commentEditAction(@RequestBody CommentInfoVO commentvo, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());
		int nRetCode = ResultData.ERR_RESULT_FAIL;

		try {
			if (CommentInfoService.updateData(commentvo) > 0)
				nRetCode = ResultData.RET_OK;
		} catch (DataAccessException e) {
			nRetCode = ResultData.ERR_RESULT_FAIL;
			logger.error(request.getServletPath() + ", Update Error => " + e.getMessage());
		}

		return ResultData.create(nRetCode);
	}

	@RequestMapping("/del_action.do")
	@ResponseBody
	public BaseResult commentDelAction(@RequestBody CommentInfoVO commentvo, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info(">>>>> REQ-URI: " + request.getServletPath());
		int nRetCode = ResultData.ERR_RESULT_FAIL;

		if (CommentInfoService.deleteData(commentvo) > 0)
			nRetCode = ResultData.RET_OK;

		return ResultData.create(nRetCode);
	}

}
