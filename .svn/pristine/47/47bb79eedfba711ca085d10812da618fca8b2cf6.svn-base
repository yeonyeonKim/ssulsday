package kr.cubex.utils;

public class HexUtils {

    /**
     * Used to build output as Hex
     */
    private static final char[] DIGITS_LOWER =
        {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    /**
     * Used to build output as Hex
     */
    private static final char[] DIGITS_UPPER =
        {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    //
    public static char[] encodeHex(final byte[] data) {
        return encodeHex(data, true);
    }
    public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {
        return encodeHex(data, toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);
    }
    protected static char[] encodeHex(final byte[] data, final char[] toDigits) {
        final int l = data.length;
        final char[] out = new char[l << 1];
        // two characters form the hex value.
        for (int i = 0, j = 0; i < l; i++) {
            out[j++] = toDigits[(0xF0 & data[i]) >>> 4];
            out[j++] = toDigits[0x0F & data[i]];
        }
        return out;
    }
    public static int toHex(char chHigh, char chLow) {
		int		nValue = 0;

		if (chLow >= '0' && chLow <= '9')
			nValue = chLow - 48;		// ch - '0'
		else if (chLow >= 'a' && chLow <= 'f')
			nValue = 10 + chLow - 97;	// ch - 'a' + 10
		else if (chLow >= 'A' && chLow <= 'F')
			nValue = 10 + chLow - 65;	// ch - 'A' + 10

		if (chHigh >= '0' && chHigh <= '9')
			nValue += (chHigh - 48) << 4;		// (ch - '0') << 4
		else if (chHigh >= 'a' && chHigh <= 'f')
			nValue += (10 + chHigh - 97) << 4;	// (ch - 'a' + 10) << 4
		else if (chHigh >= 'A' && chHigh <= 'F')
			nValue += (10 + chHigh - 65) << 4;	// (ch - 'A' + 10) << 4

		return nValue;
	}
    //
    public static String encodeHexString(final byte[] data) {
        return new String(encodeHex(data));
    }
    public static byte[] decodeHexString(final String hexStr) {
		byte[]		byText;

		byText = new byte[hexStr.length() / 2];

		for (int i = 0; i < byText.length; i ++) {
			char	ch1 = hexStr.charAt(i*2);
			char	ch2 = hexStr.charAt(i*2+1);

			byText[i] = (byte)toHex(ch1, ch2);
		}
		return byText;
    }
}
